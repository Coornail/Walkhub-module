<?php
/**
 * @file
 * Code for the WalkHub feature.
 */

include_once 'walkhub.features.inc';

/**
 * Implements hook_init().
 */
function walkhub_init() {
  drupal_add_js('misc/ajax.js');
  drupal_add_js(drupal_get_path('module', 'walkhub') . '/walkhub.js');
  drupal_add_library('system', 'ui.dialog');
}

/**
 * Implements hook_menu().
 */
function walkhub_menu() {
  $items = array();

  $items['walkthrough/import'] = array(
    'title' => 'Import walkthrough',
    'description' => 'Multi step form to create walkthroughs.',
    'type' => MENU_CALLBACK,
    'access arguments' => array('create', 'walkthrough'),
    'access callback' => 'node_access',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('walkhub_create_walkthrough_form'),
    'file' => 'walkhub.pages.inc',
  );

  $items['node/%walkhub_walkthrough_node/start'] = array(
    'title' => 'Start walkthrough',
    'page callback' => 'walkhub_start_walkthrough',
    'page arguments' => array(1),
    'access callback' => 'node_access',
    'access arguments' => array('view', 1),
    'type' => MENU_LOCAL_ACTION,
    'file' => 'walkhub.pages.inc',
  );

  $items['node/%walkhub_walkthrough_node/selenium_export'] = array(
    'title' => 'Export to selenium',
    'page callback' => 'walkhub_selenium_export',
    'page arguments' => array(1),
    'access arguments' => array('export walkthrough to selenium'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'walkhub.export.inc',
  );

  $items['walkhub'] = array(
    'title' => 'Walkthrough is starting...',
    'page callback' => 'walkhub_walkhub_page',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'walkhub.pages.inc',
  );

  $items['admin/structure/walkhub-patterns'] = array(
    'title' => 'Walkhub patterns',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('walkhub_command_patterns_form'),
    'access arguments' => array('administer walkhub patterns'),
    'file' => 'walkhub.admin.inc',
  );

  $items['admin/config/services/walkhub'] = array(
    'title' => 'Walkhub configuration',
    'type' => MENU_NORMAL_ITEM,
    'access arguments' => array('administer walkthrough'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('walkhub_configuration_form'),
    'file' => 'walkhub.admin.inc'
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function walkhub_permission() {
  return array(
    'administer walkhub patterns' =>  array(
      'title' => t('Administer Walkhub patterns'),
    ),
    'administer walkthrough' => array(
      'title' => t('Administer walkthrough'),
    ),
    'export walkthrough to selenium' => array(
      'title' => t('Export walkthrough to selenium'),
    ),
  );

}

/**
 * Loads a node if it's content type is 'walkthrough'.
 *
 * @param int $nid
 *   Node ID.
 *
 * @return bool|stdClass
 *   Node on success, false otherwise.
 */
function walkhub_walkthrough_node_load($nid) {
  $node = node_load($nid);

  if ($node && $node->type === 'walkthrough') {
    return $node;
  }

  return FALSE;
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function walkhub_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  if ($data['actions']['count']) {
    foreach ($data['actions']['output'] as &$action) {
      if ($action['#link']['path'] === 'node/%/start') {
        $action['#link']['localized_options']['attributes']['class'][] = 'walkthrough-start';

        $loadfunc = reset($action['#link']['load_functions']);
        $path = explode('/', $action['#link']['href']);
        $nid = $path[1];
        if (is_callable($loadfunc)) {
          $walkthrough = $loadfunc($nid);
          if ($walkthrough) {
            $action['#link']['localized_options']['attributes']['data-walkthrough-uuid'] = $walkthrough->uuid;
            if (variable_get('walkhub_use_proxy') && ($proxy_url = variable_get('walkhub_proxy_url'))) {
              $action['#link']['localized_options']['attributes']['data-walkthrough-proxy-url'] = $proxy_url;
            }
            foreach (_walkhub_get_parameters($walkthrough) as $parameter => $default_value) {
              $action['#link']['localized_options']['attributes']["data-walkthrough-parameter-{$parameter}"] = $default_value;
            }
          }
        }
        break;
      }
    }
  }
}

/**
 * Implements hook_node_view_alter().
 */
function walkhub_node_view_alter(&$build) {
  if ($build['#node']->type == 'walkthrough') {
    $build['#attached']['css'][] = drupal_get_path('module', 'walkhub') . '/walkhub.css';
  }
}

/**
 * Implements hook_field_attach_validate().
 */
function walkhub_field_attach_validate($entity_type, $entity, &$errors) {
  static $parameter_blacklist = array(
    'q', 'destination', 'autostart', 'method',
  );
  if ($entity_type == 'field_collection_item' && !empty($entity->field_parameter_name)) {
    $lang = $entity->langcode();
    if (!$lang) {
      $lang = LANGUAGE_NONE;
    }
    $field_value = $entity->field_parameter_name[$lang][0]['value'];
    if (in_array($field_value, $parameter_blacklist)) {
      $errors['field_parameter_name'][$lang][0][] = array(
        'error' => 'field_parameter_name_blacklisted',
        'message' => t('This name is restricted. It cannot be used for parameters.'),
      );
    }
    if ($field_value !== '' && !preg_match('/^[a-z]+$/', $field_value)) {
      $errors['field_parameter_name'][$lang][0][] = array(
        'error' => 'field_parameter_name_invalid',
        'message' => t('The parameter name must contain only lowercase letters.'),
      );
    }
  }
}

/**
 * Implements hook_services_resources().
 */
function walkhub_services_resources() {
  $walkhub_resource = array();

  $inc = array(
    'type' => 'inc',
    'module' => 'walkhub',
  );
  $walkthroughinc = $inc + array(
    'name' => 'services/walkthrough',
  );
  $stepinc = $inc + array(
    'name' => 'services/step',
  );
  $commentinc = $inc + array(
    'name' => 'services/comment',
  );
  $listinc = $inc + array(
    'name' => 'services/list',
  );
  $listinginc = $inc + array(
    'name' => 'services/listing',
  );

  $walkhub_resource['walkhub-walkthrough'] = array(
    'retrieve' => array(
      'file' => $walkthroughinc,
      'callback' => '_walkthrough_resource_retrieve',
      'args' => array(
        array(
          'name' => 'walkthroughid',
          'optional' => FALSE,
          'source' => array('path' => 0),
          'type' => 'string',
        ),
      ),
      'access callback' => '_walkthrough_resource_access',
      'access callback file' => $walkthroughinc,
      'access arguments' => array('view'),
      'access arguments append' => TRUE,
    ),
  );

  $walkhub_resource['walkhub-step'] = array(
    'operations' => array(
      'retrieve' => array(
        'file' => $stepinc,
        'callback' => '_step_resource_retrieve',
        'args' => array(
          array(
            'name' => 'stepid',
            'optional' => FALSE,
            'source' => array('path' => 0),
            'type' => 'string',
          ),
        ),
        'access callback' => '_step_resource_access',
        'access callback file' => $stepinc,
        'access arguments' => array('view'),
        'access arguments append' => TRUE,
      ),
      'update' => array(
        'file' => $stepinc,
        'callback' => '_step_resource_update',
        'args' => array(
          array(
            'name' => 'stepid',
            'optional' => FALSE,
            'source' => array('path' => 0),
            'type' => 'string',
          ),
          array(
            'name' => 'step',
            'optional' => FALSE,
            'source' => 'data',
            'type' => 'array',
          )
        ),
        'access callback' => '_step_resource_access',
        'access callback file' => $stepinc,
        'access arguments' => array('update'),
        'access arguments append' => TRUE,
      ),
    ),
  );

  $walkhub_resource['walkhub-comment'] = array();

  $walkhub_resource['walkhub-list'] = array(
    'retrieve' => array(
      'file' => $listinc,
      'callback' => '_list_resource_retrieve',
      'args' => array(
        array(
          'name' => 'listname',
          'optional' => FALSE,
          'source' => array('path' => 0),
          'type' => 'string',
        ),
      ),
      'access callback' => '_list_resource_access',
      'access callback file' => $listinc,
      'access arguments' => array('view'),
      'access arguments append' => TRUE,
    ),
    'index' => array(
      'file' => $listinc,
      'callback' => '_list_resource_index',
      'access callback' => '_list_resource_access',
      'access callback file' => $listinc,
      'access arguments' => array('index'),
      'access arguments append' => TRUE,
      'args' => array(
        'name' => array(
          'name' => 'name',
          'type' => 'string',
          'description' => 'The name of the view',
          'source' => array('param' => 'name'),
          'optional' => TRUE,
          'default value' => '',
        ),
        'description' => array(
          'name' => 'description',
          'type' => 'string',
          'description' => 'The description of the view',
          'source' => array('param' => 'description'),
          'optional' => TRUE,
          'default value' => '',
        ),
        'tag' => array(
          'name' => 'tag',
          'type' => 'string',
          'description' => 'The tag of the view',
          'source' => array('param' => 'tag'),
          'optional' => TRUE,
          'default value' => '',
        ),
        'base_table' => array(
          'name' => 'base_table',
          'type' => 'string',
          'description' => 'The base table of the view',
          'source' => array('param' => 'base_table'),
          'optional' => TRUE,
          'default value' => '',
        ),
        'human_name' => array(
          'name' => 'human_name',
          'type' => 'string',
          'description' => 'The human name of the view',
          'source' => array('param' => 'human_name'),
          'optional' => TRUE,
          'default value' => '',
        ),
      ),
    ),
  );

  $walkhub_resource['walkhub-listing'] = array(
    'index' => array(
      'file' => $listinginc,
      'callback' => '_listing_resource_index',
      'access callback' => '_list_resource_access',
      'access callback file' => $listinginc,
      'access arguments' => array('index'),
      'access arguments append' => TRUE,
      'args' => array(),
    ),
  );

  $walkhub_resource['walkhub-step-suggestion'] = array(
    'retrieve' => array(
      'file' => $listinc,
      'callback' => '_step_suggestion_retrieve',
      'args' => array(
        array(
          'name' => 'domain',
          'optional' => FALSE,
          'source' => array('data'),
          'type' => 'string',
        ),
        array(
          'name' => 'command',
          'optional' => FALSE,
          'source' => array('data'),
          'type' => 'string',
        ),
        array(
          'name' => 'arg1',
          'optional' => TRUE,
          'source' => array('data'),
          'type' => 'string',
        ),
        array(
          'name' => 'arg2',
          'optional' => TRUE,
          'source' => array('data'),
          'type' => 'string',
        ),
        array(
          'name' => 'uid',
          'optional' => TRUE,
          'source' => array('data'),
          'type' => 'string',
        ),
      ),
      'access callback' => '_list_resource_access',
      'access callback file' => $listinc,
      'access arguments' => array('view'),
      'access arguments append' => TRUE,
    ),
  );

  return $walkhub_resource;
}

/**
 * Implements hook_node_presave().
 *
 * @param $node
 */
function walkhub_node_presave($node) {
  if ($node->type == 'walkthrough' && !empty($node->field_raw_input[LANGUAGE_NONE][0]['value']) && empty($node->nid)) {
    $source = field_get_items('node', $node, 'field_raw_input', LANGUAGE_NONE);
    list($steps, $base) = _walkhub_break_up_to_steps($source[0]['value']);
    if ($base) {
      _walkhub_add_default_parameters($base, $node);
    }
    if (!empty($steps)) {
      // Create new nodes based on the selenium source.
      $walkthrough_steps = array();
      foreach ($steps as $key => $step) {
        $steps[$key]['fci'] = _walkhub_create_step($step, $key, $node);
        $walkthrough_steps[$key]['value'] = $steps[$key]['fci']->identifier();
        $walkthrough_steps[$key]['revision_id'] = $steps[$key]['fci']->revision_id;
      }
      $node->field_fc_steps[LANGUAGE_NONE] = $walkthrough_steps;
    }
  }
}

/**
 * Adds the 'domain' as a default parameter to the node object.
 *
 * @param string $base
 *   THe base url from the selenium test.
 * @param stdClass $node
 *   THe newly created node object.
 */
function _walkhub_add_default_parameters($base, $node) {
  $host = parse_url($base, PHP_URL_HOST);
  $item = new FieldCollectionItemEntity();
  $item->is_new = TRUE;
  $item->field_name = 'field_parameters';
  $item->setHostEntity('node', $node, $node->language, FALSE);
  $item->field_parameter_name[$node->language][0]['value'] = 'domain';
  $item->field_parameter_default_value[$node->language][0]['value'] = $host;
  $item->save(TRUE);
  $node->field_parameters[$node->language][] = array(
    'value' => $item->identifier(),
    'revision_id' => $item->revision_id,
  );
}

/**
 * Break up to steps $source selenium input.
 *
 * @param $source
 * @return array
 */
function _walkhub_break_up_to_steps($source) {
  $highlightdata = _walkhub_get_supported_selenium_commands();

  // Change <br /> to newlines.
  $source = preg_replace('#<br\s*/?>#i', "\n", $source);

  $steps = array();
  $first = TRUE;
  $doc = new DOMDocument();
  // Load the selenium test case.
  $doc->loadHTML($source);
  $basexpath = new DOMXPath($doc);
  $baseList = $basexpath->query('//link[@rel="selenium.base"]');
  $base = $baseList->length ? $baseList->item(0)->getAttribute('href') : NULL;
  $xpath = new DOMXpath($doc);
  // Break up to steps.
  $elements = $xpath->query('//tbody/tr');
  if ($elements->length) {
    // Loop through the steps.
    foreach ($elements as $step => $element) {
      // Get the step attributes.
      $attributes = $element->getElementsByTagName('td');
      foreach ($attributes as $key => $attribute) {
        switch ($key) {
          case 0:
            $steps[$step]['action'] = $attribute->nodeValue;
            break;
          case 1:
            $steps[$step]['xpath'] = $attribute->nodeValue;
            break;
          case 2:
            $steps[$step]['description'] = $attribute->nodeValue;
            break;
        }
      }
      $act = endsWith($steps[$step]['action'], 'AndWait') ?
        substr($steps[$step]['action'], 0, -7) : $steps[$step]['action'];
      $steps[$step]['highlight'] = isset($highlightdata[$act]) ?
        ($highlightdata[$act] ? $steps[$step]['description'] : $steps[$step]['xpath']) : '';
      if ($steps[$step]['action'] === 'open') {
        $components = parse_url($steps[$step]['xpath']);
        if (empty($components['host'])) {
          $steps[$step]['xpath'] = _walkhub_assemble_url($base, $steps[$step]['xpath'], $first);
          if ($first) {
            $first = FALSE;
          }
        }
      }
    }
  }
  // TODO I think this function should be an iterator object.
  return array($steps, $base);
}

/**
 * Returns with the supported selenium commands list.
 *
 * @return array
 */
function _walkhub_get_supported_selenium_commands() {
  return array(
    'addSelection' => 0,
    'assignId' => 0,
    'check' => 0,
    'click' => 0,
    'clickAt' => 0,
    'contextMenu' => 0,
    'contextMenuAt' => 0,
    'doubleClick' => 0,
    'doubleClickAt' => 0,
    'dragAndDrop' => 0,
    'dragAndDropToObject' => 0,
    'dragdrop' => 0,
    'fireEvent' => 0,
    'focus' => 0,
    'highlight' => 0,
    'keyDown' => 0,
    'keyPress' => 0,
    'keyUp' => 0,
    'mouseDown' => 0,
    'mouseDownAt' => 0,
    'mouseDownRight' => 0,
    'mouseDownRightAt' => 0,
    'mouseMove' => 0,
    'mouseMoveAt' => 0,
    'mouseOut' => 0,
    'mouseOutAt' => 0,
    'mouseOver' => 0,
    'mouseUp' => 0,
    'mouseUpAt' => 0,
    'mouseUpRight' => 0,
    'mouseUpRightAt' => 0,
    'removeAllSelections' => 0,
    'removeSelection' => 0,
    'sendKeys' => 0,
    'select' => 0,
    'selectFrame' => 0,
    'setCursorPosition' => 0,
    'submit' => 0,
    'type' => 0,
    'typeKeys' => 0,
    'uncheck' => 0,
  );
}

function endsWith($haystack, $needle) {
  return substr($haystack, -strlen($needle)) == $needle;
}

function _walkhub_assemble_url($base, $url, $parameter = FALSE) {
  if ($url[0] === '/') {
    $base_parts = parse_url($base);
    $base = $base_parts['scheme'] . '://';
    if (!empty($base_parts['user']) || !empty($base_parts['pass'])) {
      if (!empty($base_parts['user'])) {
        $base .= $base_parts['user'];
      }
      if (!empty($base_parts['pass'])) {
        $base .= ':' . $base_parts['pass'];
      }
      $base .= '@';
    }
    $base .= $parameter ? '[domain]' : $base_parts['host'];
    if (!empty($base_parts['port'])) {
      $base .= ':' . $base_parts['port'];
    }
  }

  return trim($base, '/') . '/' . trim($url, '/');
}

/**
 *
 *
 * @param $source
 * @return string
 */
function _walkhub_parse_url($source) {
  $doc = new DOMDocument();
  // Load the selenium test case.
  $doc->loadHTML($source);
  $link = $doc->getElementsByTagName('link');
  $url = $link->item(0)->getAttribute('href');
  return $url;
}

/**
 * Create a step node.
 *
 * @param array $step
 * @param int $key
 * @param stdClass $walkthrough_node
 * @return FieldCollectionItemEntity
 */
function _walkhub_create_step(array $step, $key, $walkthrough_node) {
  $lang = $walkthrough_node->language;
  $fci = entity_create('field_collection_item', array('field_name' => 'field_fc_steps'));
  $fci->setHostEntity('node', $walkthrough_node, $lang, FALSE);
  $fci->field_fc_step_name[$lang][0]['value'] = "$walkthrough_node->title $key. step";
  $fci->field_fc_step_command_1[$lang][0]['value'] = $step['action'];
  $fci->field_fc_step_command_2[$lang][0]['value'] = $step['xpath'];
  $fci->field_fc_step_command_3[$lang][0]['value'] = $step['description'];
  $fci->field_fc_step_highlight[$lang][0]['value'] = $step['highlight'];

  drupal_alter('walkhub_import_step', $fci);

  $fci->save(TRUE);

  return $fci;
}

/**
 * Extracts parameter data from a walkthrough node.
 *
 * @param stdClass $walkthrough
 *   Walkthrough node.
 *
 * @return array
 *   Array in a format of $parameter => $default_value.
 */
function _walkhub_get_parameters($walkthrough) {
  $result = array();

  if ($walkthrough->field_parameters) {
    $parameters = field_collection_item_load_multiple(array_map(function ($item) {
      return $item['value'];
    }, $walkthrough->field_parameters[$walkthrough->language]));
    foreach ($parameters as $parameterdata) {
      if (!($langcode = $parameterdata->langcode())) {
        $langcode = LANGUAGE_NONE;
      }
      $parameter = isset($parameterdata->field_parameter_name[$langcode][0]['safe_value']) ?
        $parameterdata->field_parameter_name[$langcode][0]['safe_value'] : NULL;
      $value = isset($parameterdata->field_parameter_default_value[$langcode][0]['safe_value']) ?
        $parameterdata->field_parameter_default_value[$langcode][0]['safe_value'] : NULL;
      if ($parameter !== NULL) {
        $result[$parameter] = $value;
      }
    }
  }

  return $result;
}

/**
 * Implements hook_extra_fields().
 */
function walkhub_field_extra_fields() {
  $extra_fields['node']['walkthrough'] = array(
    'display' => array(
      'walkhub_step_list' => array(
        'label' => t('Rendered step list'),
        'description' => t(''),
        'weight' => 0,
      ),
    ),
  );

  return $extra_fields;
}

/**
 * Implements hook_node_view().
 */
function walkhub_node_view($node, $view_mode) {
  if ($node->type == 'walkthrough') {
    $steps = array_map(
      function($step) {
        return node_load($step['target_id']);
      },
      isset($node->field_steps[$node->language]) ? $node->field_steps[$node->language] : array()
    );

    $node->content['walkhub_step_list'] = array(
      '#theme' => 'walkhub_list_steps',
      '#walkthrough_steps' => $steps,
      '#weight' => 10,
    );
  }
}

/**
 * Implements hook_theme().
 */
function walkhub_theme($existing, $type, $theme, $path) {
  return array(
    'walkhub_list_steps' => array(
      'variables' => array(
        'walkthrough_steps' => array(),
      ),
    ),
    'walkthrough_step' => array(
      'variables' => array(
        'node' => new stdClass(),
      ),
      'path' => drupal_get_path('module', 'walkhub') . '/templates/',
      'template' => 'walkthrough_step',
    ),
  );
}

/**
 * Theme callback for rendering the steps list.
 *
 * @param array $steps
 *   Array of node objects.
 */
function theme_walkhub_list_steps(array $steps) {
  $rendered_steps = array_map(
    function($node) {
      node_build_content($node);
      return theme('walkthrough_step', array('node' => $node));
    },
    $steps['walkthrough_steps']
  );

  return theme('item_list', array('items' => $rendered_steps));
}

