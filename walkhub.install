<?php
/**
 * @file
 * Walkhub module update and install functions.
 */

/**
 * Convert step content type nodes to field collection items.
 */
function walkhub_update_7001(&$sandbox) {
  if (empty($sandbox['total'])) {
    $sandbox['progress'] = 0;
    $sandbox['last_nid'] = 0;

    // Forcefully revert all components of walkhub feature.
    if ($feature = features_load_feature('walkhub', TRUE)) {
      foreach (array_keys($feature->info['features']) as $component) {
        if (features_hook($component, 'features_revert')) {
          features_revert(array('walkhub' => array($component)));
        }
      }
    }

    // Count the total number of the walkthrough nodes.
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'node')
      ->entityCondition('bundle', 'walkthrough')
      ->count();
    $sandbox['total'] = $query->execute();
  }

  // Get the next 10 walhtrough node.
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'walkthrough')
    ->propertyCondition('nid', $sandbox['last_nid'], '>')
    ->propertyOrderBy('nid')
    ->range(0, 10);
  $result = $query->execute();

  if (isset($result['node'])) {
    $nids = array_keys($result['node']);
    $walkthrough_nodes = entity_load('node', $nids);
    $deletable_steps = array();

    // Get all steps.
    foreach ($walkthrough_nodes as $walkthrough_node) {
      $steps = field_get_items('node', $walkthrough_node, 'field_steps');

      if ($steps) {
        // Load the step nodes to get the stored data.
        foreach ($steps as $step) {
          $step_node = node_load($step['target_id']);
          // If the referenced step node doesn't exist continue with the next
          // one.
          if (!$step_node) {
            continue;
          }
          // Store the deletable step node's ID.
          $deletable_steps[] = $step_node->nid;

          // Store the field collection values.
          $values = array();
          $values['field_name'] = 'field_fc_steps';
          $values['field_fc_step_name'][$step_node->language][0]['value'] = $step_node->title;
          // Universal unique ID. This id is used for service requests.
          $values['uuid'] = $step_node->uuid;

          // An array with the step node field names and the step field
          // collection field names.
          $fields = array(
            'body' => 'field_fc_step_description',
            'field_step_highlight' => 'field_fc_step_highlight',
            'field_command_1' => 'field_fc_step_command_1',
            'field_command_2' => 'field_fc_step_command_2',
            'field_command_3' => 'field_fc_step_command_3',
            'field_show_title' => 'field_fc_step_show_title',
          );

          // Set the field values.
          foreach ($fields as $step_field_name => $entity_field_name) {
            $field = field_get_items('node', $step_node, $step_field_name);
            if ($field) {
              $field = current($field);
              $values[$entity_field_name][$step_node->language][0]['value'] = $field['value'];
            }
          }

          // Create the field collection entry and associate it with the node.
          $step_entity = entity_create('field_collection_item', $values);
          $step_entity->setHostEntity('node', $walkthrough_node);
          $step_entity->save();
        }
      }

      // Store the last node id and update progress.
      $sandbox['last_nid'] = $walkthrough_node->nid;
      $sandbox['progress']++;
    }
    // Delete the stored step nodes because they are migrated into field
    // collection items.
    node_delete_multiple($deletable_steps);
  }

  // Set the finished variable based on the current progress status.
  $sandbox['#finished'] = $sandbox['progress'] / $sandbox['total'];

  return t('Step nodes have been converted to field collection items.');
}

/**
 * Delete Steps reference field.
 */
function walkhub_update_7002() {
  field_delete_field('field_steps');
  $limit = variable_get('field_purge_batch_size', 10);
  field_purge_batch($limit);

  return t('The field Steps has been deleted.');
}
