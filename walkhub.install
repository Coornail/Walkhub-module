<?php
/**
 * @file
 * Walkhub module update and install functions.
 */

/**
 * Revert specified features.
 *
 * Code mostly taken from drush.
 */
function walkhub_features_revert($modules) {
  module_load_include('inc', 'features', 'features.export');
  features_include();

  foreach (
    $modules as $module) {
    if (($feature = feature_load($module, TRUE)) && module_exists($module)) {
      $components = array();
      // Forcefully revert all components of a feature.
      foreach (array_keys($feature->info['features']) as $component) {
        if (features_hook($component, 'features_revert')) {
          $components[] = $component;
        }
      }
    }
    foreach ($components as $component) {
      features_revert(array($module => array($component)));
    }
  }
}

/**
 * Implements hook_schema().
 */
function walkhub_schema() {
  $schema['walhub_patterns'] = array(
    'description' => 'The base table for default templates.',
    'fields' => array(
      'command' => array(
        'description' => 'The command name.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'pattern' => array(
        'description' => "The command's pattern.",
        'type' => 'text',
        'not null' => TRUE,
      ),
    ),
    'primary key' => array('command'),
  );

  return $schema;
}

/**
 * Convert step content type nodes to field collection items.
 */
function walkhub_update_7001(&$sandbox) {
  if (empty($sandbox['total'])) {
    $sandbox['progress'] = 0;
    $sandbox['last_nid'] = 0;

    // Forcefully revert all components of walkhub feature.
    if ($feature = features_load_feature('walkhub', TRUE)) {
      foreach (array_keys($feature->info['features']) as $component) {
        if (features_hook($component, 'features_revert')) {
          features_revert(array('walkhub' => array($component)));
        }
      }
    }

    // Count the total number of the walkthrough nodes.
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'node')
      ->entityCondition('bundle', 'walkthrough')
      ->count();
    $sandbox['total'] = $query->execute();
  }

  // Get the next 10 walhtrough node.
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'walkthrough')
    ->propertyCondition('nid', $sandbox['last_nid'], '>')
    ->propertyOrderBy('nid')
    ->range(0, 10);
  $result = $query->execute();

  if (isset($result['node'])) {
    $nids = array_keys($result['node']);
    $walkthrough_nodes = entity_load('node', $nids);
    $deletable_steps = array();

    // Get all steps.
    foreach ($walkthrough_nodes as $walkthrough_node) {
      $steps = field_get_items('node', $walkthrough_node, 'field_steps');

      if ($steps) {
        // Load the step nodes to get the stored data.
        foreach ($steps as $step) {
          $step_node = node_load($step['target_id']);
          // If the referenced step node doesn't exist continue with the next
          // one.
          if (!$step_node) {
            continue;
          }
          // Store the deletable step node's ID.
          $deletable_steps[] = $step_node->nid;

          // Store the field collection values.
          $values = array();
          $values['field_name'] = 'field_fc_steps';
          $values['field_fc_step_name'][$step_node->language][0]['value'] = $step_node->title;
          // Universal unique ID. This id is used for service requests.
          $values['uuid'] = $step_node->uuid;

          // An array with the step node field names and the step field
          // collection field names.
          $fields = array(
            'body' => 'field_fc_step_description',
            'field_step_highlight' => 'field_fc_step_highlight',
            'field_command_1' => 'field_fc_step_command_1',
            'field_command_2' => 'field_fc_step_command_2',
            'field_command_3' => 'field_fc_step_command_3',
            'field_show_title' => 'field_fc_step_show_title',
          );

          // Set the field values.
          foreach ($fields as $step_field_name => $entity_field_name) {
            $field = field_get_items('node', $step_node, $step_field_name);
            if ($field) {
              $field = current($field);
              $values[$entity_field_name][$step_node->language][0]['value'] = $field['value'];
            }
          }

          // Create the field collection entry and associate it with the node.
          $step_entity = entity_create('field_collection_item', $values);
          $step_entity->setHostEntity('node', $walkthrough_node);
          $step_entity->save();
        }
      }

      // Store the last node id and update progress.
      $sandbox['last_nid'] = $walkthrough_node->nid;
      $sandbox['progress']++;
    }
    // Delete the stored step nodes because they are migrated into field
    // collection items.
    node_delete_multiple($deletable_steps);
  }

  // Set the finished variable based on the current progress status.
  $sandbox['#finished'] = $sandbox['progress'] / $sandbox['total'];

  return t('Step nodes have been converted to field collection items.');
}

/**
 * Delete Steps reference field.
 */
function walkhub_update_7002() {
  field_delete_field('field_steps');
  $limit = variable_get('field_purge_batch_size', 10);
  field_purge_batch($limit);

  return t('The field Steps has been deleted.');
}

/**
 * Create db table for command patterns.
 */
function walkhub_update_7003() {
  $db_schema = drupal_get_schema('walhub_patterns', TRUE);
  db_create_table('walhub_patterns', $db_schema);

  return t('Walkhub patterns table has been created.');
}

/**
 * Remove the advanced settings field group.
 */
function walkhub_update_7004() {
  $group = field_group_load_field_group('group_walkthrough_advanced', 'node', 'walkthrough', 'form');
  field_group_group_export_delete($group, FALSE);
}

/**
 * Add prerequisites and proxy warning message fields.
 */
function walkhub_update_7005() {
  walkhub_features_revert(array('walkhub'));

  return t('Walkhub feature reverted.');
}

/**
 * Add default proxy warning message to existing walkthroughs.
 */
function walkhub_update_7006(&$sandbox) {
  $content_type = 'walkthrough';
  $field_name = 'field_proxy_warning_message';

  if (empty($sandbox['total'])) {
    $sandbox['progress'] = 0;
    $sandbox['last_nid'] = 0;

    // Count the total number of the walkthrough nodes.
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'node')
      ->entityCondition('bundle', $content_type)
      ->count();
    $sandbox['total'] = $query->execute();
  }

  // Get the next 10 walhtrough node.
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', $content_type)
    ->propertyCondition('nid', $sandbox['last_nid'], '>')
    ->propertyOrderBy('nid')
    ->range(0, 20);
  $result = $query->execute();

  if (!empty($result['node'])) {
    $nodes = entity_load('node', array_keys($result['node']));

    foreach($nodes as $node) {
      static $default_proxy_message = NULL;
      if ($default_proxy_message === NULL) {
        $field = field_info_field($field_name);
        $instance = field_info_instance('node', $field_name, $content_type);
        $default_proxy_message = field_get_default_value('node', $node, $field, $instance, $node->language);
      }

      $node->field_proxy_warning_message[LANGUAGE_NONE][0]['value'] = $default_proxy_message[0]['value'];
      $node->field_proxy_warning_message[LANGUAGE_NONE][0]['format'] = 'full_html';
      node_save($node);

      // Store the last node id and update progress.
      $sandbox['last_nid'] = $node->nid;
      $sandbox['progress']++;
    }
  }

  // Set the finished variable based on the current progress status.
  $sandbox['#finished'] = $sandbox['progress'] / $sandbox['total'];

  return t('Step nodes have been converted to field collection items.');
}

/**
 * Makes sure that all selenium-related fields are longtext.
 */
function walkhub_update_7007() {
  $fields = array(
    'field_fc_step_command_2',
    'field_fc_step_command_3',
    'field_fc_step_highlight',
  );
  $field_data = db_query('SELECT field_name, data FROM {field_config} WHERE field_name IN (:fields)', array(
      ':fields' => $fields,
    ))
    ->fetchAllKeyed();
  foreach ($field_data as $field_name => $data) {
    $data_unserialized = unserialize($data);
    unset($data_unserialized['settings']['max_length']);
    $data_updated = serialize($data_unserialized);
    db_update('field_config')
      ->fields(array(
        'type' => 'text_long',
        'data' => $data_updated,
      ))
      ->condition('field_name', $field_name)
      ->execute();

    $table_name = "field_data_{$field_name}";
    $revision_table_name = "field_revision_{$field_name}";
    $column_name = "{$field_name}_value";

    foreach (array($table_name, $revision_table_name) as $table) {
      db_query("ALTER TABLE {{$table}} CHANGE $column_name $column_name LONGTEXT");
    }
  }
}
